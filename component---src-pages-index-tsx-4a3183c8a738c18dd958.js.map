{"version":3,"file":"component---src-pages-index-tsx-4a3183c8a738c18dd958.js","mappings":"kJAEe,SAASA,EAAMC,GAAyC,IAAxC,SAAEC,GAAmCD,EACnE,OACCE,EAAAA,cAAAA,EAAAA,SAAA,KAECA,EAAAA,cAAA,QAAMC,UAAU,yDACdF,GAKL,C,8ECTe,SAASG,EAAKJ,GAAiF,IAAhF,SAAEC,EAAQ,UAAEE,KAAcE,GAAmDL,EAC1G,OACCE,EAAAA,cAAA,OAAKC,UAAW,8BAAgCA,GAC/CD,EAAAA,cAACI,EAAAA,GAAIC,OAAAC,OAAA,CACJL,UAAU,qEACNE,EAAK,CAAEI,GAAG,MAEbR,GAIL,C,8ECqBO,IAAMS,EACZ,SAAYC,EAAsBC,GACjCC,KAAKC,GAAKH,EAAKG,GACfD,KAAKE,KAAOJ,EAAKI,KACjBF,KAAKD,KAAOA,EACZC,KAAKG,SAAWJ,EAAKK,MAAM,KAAK,GAEhCJ,KAAKK,KAAOP,EAAKO,KACjBL,KAAKM,UAAYR,EAAKQ,WAAuB,GAE7C,MAAMC,EAAST,EAAKS,OAEhBA,GAAUA,EAAOC,eACpBR,KAAKQ,aAAeC,IAAOF,EAAOC,cAEpC,EAGM,SAASE,EAAaC,EAAkBC,GAC9C,MAAMC,EAAQ,GAGd,IAAK,MAAMC,KAAQH,EAAQI,MAAO,CACjC,MAAMC,EAAoBJ,EAAYG,MAAME,MAC1CC,GAASA,EAAKC,YAAYlB,IAAMa,EAAKb,KAElCe,GACLH,EAAMO,KAAK,IAAIvB,EAAKiB,EAAME,EAAkBjB,MAC7C,CAEA,OAAOc,CACR,C,sGC3De,SAASQ,EAAU7B,GACjC,OACCH,EAAAA,cAAA,OAAKC,UAAU,iBACdD,EAAAA,cAAA,SACCiC,KAAK,OACLhC,UAAU,oJACViC,YAAa/B,EAAM+B,aAAe,kBAClCC,QAAUC,IACTA,EAAEC,kBACElC,EAAMgC,SAAShC,EAAMgC,QAAQC,EAAEE,cAAcC,MAAM,IAK5D,C,wBCde,SAASC,EAAW1C,GAA8B,IAA7B,KAAEW,GAAwBX,EAC7D,MAAM2C,EAAUhC,EAAKK,SACf4B,EAAMjC,EAAKC,KAEjB,OACCV,EAAAA,cAACI,EAAAA,GAAI,CAACG,GAAImC,EAAKzC,UAAU,oBACxBD,EAAAA,cAAA,OAAKC,UAAU,sBACdD,EAAAA,cAAA,QAAMC,UAAU,0FACdQ,EAAKI,MAEPb,EAAAA,cAAA,QAAMC,UAAU,4DACdQ,EAAKU,aAAawB,WAEpB3C,EAAAA,cAAA,QAAMC,UAAU,yBAAyBwC,IAI7C,CCfA,SAASG,EAAQL,GACf,OAAQM,MAAMD,QAEVC,MAAMD,QAAQL,GADI,mBAAlBO,EAAOP,EAEb,CAGA,MAAMQ,EAAW,IAUjB,SAAS,EAASR,GAChB,OAAgB,MAATA,EAAgB,GAVzB,SAAsBA,GAEpB,GAAoB,iBAATA,EACT,OAAOA,EAET,IAAIS,EAAST,EAAQ,GACrB,MAAiB,KAAVS,GAAiB,EAAIT,IAAUQ,EAAW,KAAOC,CAC1D,CAG8BC,CAAaV,EAC3C,CAEA,SAASW,EAASX,GAChB,MAAwB,iBAAVA,CAChB,CAEA,SAASY,EAASZ,GAChB,MAAwB,iBAAVA,CAChB,CAGA,SAASa,EAAUb,GACjB,OACY,IAAVA,IACU,IAAVA,GAUJ,SAAsBA,GACpB,OAAOc,EAASd,IAAoB,OAAVA,CAC5B,CAXKe,CAAaf,IAA2B,oBAAjBO,EAAOP,EAEnC,CAEA,SAASc,EAASd,GAChB,MAAwB,iBAAVA,CAChB,CAOA,SAASgB,EAAUhB,GACjB,OAAOA,OACT,CAEA,SAASiB,EAAQjB,GACf,OAAQA,EAAMkB,OAAOC,MACvB,CAIA,SAASZ,EAAOP,GACd,OAAgB,MAATA,OACOoB,IAAVpB,EACE,qBACA,gBACFlC,OAAOuD,UAAUC,SAASC,KAAKvB,EACrC,CAEA,MAUMwB,EAAwBlD,GAAS,WAAWA,oBAE5CmD,EAA4BC,GAChC,6BAA6BA,gCAEzBC,EAAS7D,OAAOuD,UAAUO,eAEhC,MAAMC,EACJ,WAAAC,CAAYC,GACV3D,KAAK4D,MAAQ,GACb5D,KAAK6D,QAAU,CAAC,EAEhB,IAAIC,EAAc,EAElBH,EAAKI,SAAST,IACZ,IAAIU,EAAMC,EAAUX,GAEpBtD,KAAK4D,MAAMxC,KAAK4C,GAChBhE,KAAK6D,QAAQG,EAAI/D,IAAM+D,EAEvBF,GAAeE,EAAIE,MAAM,IAI3BlE,KAAK4D,MAAMG,SAAST,IAClBA,EAAIY,QAAUJ,CAAW,GAE7B,CACA,GAAAK,CAAIC,GACF,OAAOpE,KAAK6D,QAAQO,EACtB,CACA,IAAAT,GACE,OAAO3D,KAAK4D,KACd,CACA,MAAAS,GACE,OAAOC,KAAKC,UAAUvE,KAAK4D,MAC7B,EAGF,SAASK,EAAUX,GACjB,IAAIvD,EAAO,KACPE,EAAK,KACLuE,EAAM,KACNN,EAAS,EACTO,EAAQ,KAEZ,GAAIlC,EAASe,IAAQrB,EAAQqB,GAC3BkB,EAAMlB,EACNvD,EAAO2E,EAAcpB,GACrBrD,EAAK0E,EAAYrB,OACZ,CACL,IAAKC,EAAOJ,KAAKG,EAAK,QACpB,MAAM,IAAIsB,MAAMxB,EAAqB,SAGvC,MAAMlD,EAAOoD,EAAIpD,KAGjB,GAFAsE,EAAMtE,EAEFqD,EAAOJ,KAAKG,EAAK,YACnBY,EAASZ,EAAIY,OAETA,GAAU,GACZ,MAAM,IAAIU,MAAMvB,EAAyBnD,IAI7CH,EAAO2E,EAAcxE,GACrBD,EAAK0E,EAAYzE,GACjBuE,EAAQnB,EAAImB,KACd,CAEA,MAAO,CAAE1E,OAAME,KAAIiE,SAAQM,MAAKC,QAClC,CAEA,SAASC,EAAcpB,GACrB,OAAOrB,EAAQqB,GAAOA,EAAMA,EAAIlD,MAAM,IACxC,CAEA,SAASuE,EAAYrB,GACnB,OAAOrB,EAAQqB,GAAOA,EAAIuB,KAAK,KAAOvB,CACxC,CA2GA,IAAIwB,EAAS,CA5CXC,iBAAiB,EAEjBC,cAAc,EAEdrB,KAAM,GAENsB,YAAY,EAEZC,OAAQ,CAACC,EAAGC,IACVD,EAAEE,QAAUD,EAAEC,MAASF,EAAEG,IAAMF,EAAEE,KAAO,EAAI,EAAKH,EAAEE,MAAQD,EAAEC,OAAS,EAAI,EApB5EE,gBAAgB,EAGhBC,gBAAgB,EAEhBC,mBAAoB,EAoBpBC,SAAU,EAGVC,UAAW,GAMXC,SAAU,OAGY,CAEtBC,mBAAmB,EAGnBpB,MA5FF,SAAaT,EAAKjE,GAChB,IAAI+F,EAAO,GACPC,GAAM,EAEV,MAAMC,EAAU,CAAChC,EAAKjE,EAAMkG,KAC1B,GAAKrD,EAAUoB,GAGf,GAAKjE,EAAKkG,GAGH,CAGL,MAAMrE,EAAQoC,EAFJjE,EAAKkG,IAIf,IAAKrD,EAAUhB,GACb,OAKF,GACEqE,IAAUlG,EAAKgD,OAAS,IACvBR,EAASX,IAAUY,EAASZ,IAAUa,EAAUb,IAEjDkE,EAAK1E,KAAK,EAASQ,SACd,GAAIK,EAAQL,GAAQ,CACzBmE,GAAM,EAEN,IAAK,IAAIG,EAAI,EAAGC,EAAMvE,EAAMmB,OAAQmD,EAAIC,EAAKD,GAAK,EAChDF,EAAQpE,EAAMsE,GAAInG,EAAMkG,EAAQ,EAEpC,MAAWlG,EAAKgD,QAEdiD,EAAQpE,EAAO7B,EAAMkG,EAAQ,EAEjC,MA3BEH,EAAK1E,KAAK4C,EA2BZ,EAMF,OAFAgC,EAAQhC,EAAKzB,EAASxC,GAAQA,EAAKK,MAAM,KAAOL,EAAM,GAE/CgG,EAAMD,EAAOA,EAAK,EAC3B,EAoDEM,gBAAgB,EAIhBC,iBAAiB,EAEjBC,gBAAiB,IAUnB,MAAMC,EAAQ,SAgCd,MAAMC,EACJ,WAAA9C,EAAY,MACVe,EAAQK,EAAOL,MAAK,gBACpB6B,EAAkBxB,EAAOwB,iBACvB,CAAC,GACHtG,KAAKyG,KAjCT,SAAcvC,EAAS,EAAGwC,EAAW,GACnC,MAAMC,EAAQ,IAAIC,IACZC,EAAIC,KAAKC,IAAI,GAAIL,GAEvB,MAAO,CACL,GAAAvC,CAAIvC,GACF,MAAMoF,EAAYpF,EAAMqF,MAAMV,GAAOxD,OAErC,GAAI4D,EAAMO,IAAIF,GACZ,OAAOL,EAAMxC,IAAI6C,GAInB,MAAMP,EAAO,EAAIK,KAAKC,IAAIC,EAAW,GAAM9C,GAGrCiD,EAAIC,WAAWN,KAAKO,MAAMZ,EAAOI,GAAKA,GAI5C,OAFAF,EAAMW,IAAIN,EAAWG,GAEdA,CACT,EACA,KAAAI,GACEZ,EAAMY,OACR,EAEJ,CAOgBd,CAAKH,EAAiB,GAClCtG,KAAKyE,MAAQA,EACbzE,KAAKwH,WAAY,EAEjBxH,KAAKyH,iBACP,CACA,UAAAC,CAAWC,EAAO,IAChB3H,KAAK2H,KAAOA,CACd,CACA,eAAAF,CAAgBG,EAAU,IACxB5H,KAAK4H,QAAUA,CACjB,CACA,OAAAC,CAAQlE,EAAO,IACb3D,KAAK2D,KAAOA,EACZ3D,KAAK8H,SAAW,CAAC,EACjBnE,EAAKI,SAAQ,CAACT,EAAKgC,KACjBtF,KAAK8H,SAASxE,EAAIrD,IAAMqF,CAAG,GAE/B,CACA,MAAAyC,IACM/H,KAAKwH,WAAcxH,KAAK2H,KAAK5E,SAIjC/C,KAAKwH,WAAY,EAGbjF,EAASvC,KAAK2H,KAAK,IACrB3H,KAAK2H,KAAK5D,SAAQ,CAACiE,EAAKC,KACtBjI,KAAKkI,WAAWF,EAAKC,EAAS,IAIhCjI,KAAK2H,KAAK5D,SAAQ,CAACiE,EAAKC,KACtBjI,KAAKmI,WAAWH,EAAKC,EAAS,IAIlCjI,KAAKyG,KAAKc,QACZ,CAEA,GAAAa,CAAIJ,GACF,MAAM1C,EAAMtF,KAAKqI,OAEb9F,EAASyF,GACXhI,KAAKkI,WAAWF,EAAK1C,GAErBtF,KAAKmI,WAAWH,EAAK1C,EAEzB,CAEA,QAAAgD,CAAShD,GACPtF,KAAK4H,QAAQW,OAAOjD,EAAK,GAGzB,IAAK,IAAIY,EAAIZ,EAAKa,EAAMnG,KAAKqI,OAAQnC,EAAIC,EAAKD,GAAK,EACjDlG,KAAK4H,QAAQ1B,GAAGA,GAAK,CAEzB,CACA,sBAAAsC,CAAuBC,EAAMrE,GAC3B,OAAOqE,EAAKzI,KAAK8H,SAAS1D,GAC5B,CACA,IAAAiE,GACE,OAAOrI,KAAK4H,QAAQ7E,MACtB,CACA,UAAAmF,CAAWF,EAAKC,GACd,IAAKrF,EAAUoF,IAAQnF,EAAQmF,GAC7B,OAGF,IAAIU,EAAS,CACXC,EAAGX,EACH9B,EAAG+B,EACHd,EAAGnH,KAAKyG,KAAKtC,IAAI6D,IAGnBhI,KAAK4H,QAAQxG,KAAKsH,EACpB,CACA,UAAAP,CAAWH,EAAKC,GACd,IAAIS,EAAS,CAAExC,EAAG+B,EAAUW,EAAG,CAAC,GAGhC5I,KAAK2D,KAAKI,SAAQ,CAACT,EAAKuF,KACtB,IAAIjH,EAAQ0B,EAAImB,MAAQnB,EAAImB,MAAMuD,GAAOhI,KAAKyE,MAAMuD,EAAK1E,EAAIvD,MAE7D,GAAK6C,EAAUhB,GAIf,GAAIK,EAAQL,GAAQ,CAClB,IAAIkH,EAAa,GACjB,MAAMC,EAAQ,CAAC,CAAEC,gBAAiB,EAAGpH,UAErC,KAAOmH,EAAMhG,QAAQ,CACnB,MAAM,eAAEiG,EAAc,MAAEpH,GAAUmH,EAAME,MAExC,GAAKrG,EAAUhB,GAIf,GAAIW,EAASX,KAAWiB,EAAQjB,GAAQ,CACtC,IAAIsH,EAAY,CACdP,EAAG/G,EACHsE,EAAG8C,EACH7B,EAAGnH,KAAKyG,KAAKtC,IAAIvC,IAGnBkH,EAAW1H,KAAK8H,EAClB,MAAWjH,EAAQL,IACjBA,EAAMmC,SAAQ,CAAC0E,EAAMU,KACnBJ,EAAM3H,KAAK,CACT4H,eAAgBG,EAChBvH,MAAO6G,GACP,GAGR,CACAC,EAAOE,EAAEC,GAAYC,CACvB,MAAO,GAAIvG,EAASX,KAAWiB,EAAQjB,GAAQ,CAC7C,IAAIsH,EAAY,CACdP,EAAG/G,EACHuF,EAAGnH,KAAKyG,KAAKtC,IAAIvC,IAGnB8G,EAAOE,EAAEC,GAAYK,CACvB,KAGFlJ,KAAK4H,QAAQxG,KAAKsH,EACpB,CACA,MAAArE,GACE,MAAO,CACLV,KAAM3D,KAAK2D,KACXiE,QAAS5H,KAAK4H,QAElB,EAGF,SAASwB,EACPzF,EACAgE,GACA,MAAElD,EAAQK,EAAOL,MAAK,gBAAE6B,EAAkBxB,EAAOwB,iBAAoB,CAAC,GAEtE,MAAM+C,EAAU,IAAI7C,EAAU,CAAE/B,QAAO6B,oBAIvC,OAHA+C,EAAQxB,QAAQlE,EAAK2F,IAAIrF,IACzBoF,EAAQ3B,WAAWC,GACnB0B,EAAQtB,SACDsB,CACT,CAaA,SAASE,EACPC,GACA,OACEC,EAAS,EAAC,gBACVC,EAAkB,EAAC,iBACnBC,EAAmB,EAAC,SACpB/D,EAAWd,EAAOc,SAAQ,eAC1BQ,EAAiBtB,EAAOsB,gBACtB,CAAC,GAEL,MAAMwD,EAAWH,EAASD,EAAQzG,OAElC,GAAIqD,EACF,OAAOwD,EAGT,MAAMC,EAAY/C,KAAKgD,IAAIH,EAAmBD,GAE9C,OAAK9D,EAKEgE,EAAWC,EAAYjE,EAHrBiE,EAAY,EAAMD,CAI7B,CAiCA,MAAMG,EAAW,GAEjB,SAASC,EACPC,EACAT,EACAU,GACA,SACExE,EAAWZ,EAAOY,SAAQ,SAC1BE,EAAWd,EAAOc,SAAQ,UAC1BD,EAAYb,EAAOa,UAAS,eAC5BH,EAAiBV,EAAOU,eAAc,mBACtCC,EAAqBX,EAAOW,mBAAkB,eAC9CF,EAAiBT,EAAOS,eAAc,eACtCa,EAAiBtB,EAAOsB,gBACtB,CAAC,GAEL,GAAIoD,EAAQzG,OAASgH,EACnB,MAAM,IAAInF,MApdZ,iCAod2CmF,MAG3C,MAAMI,EAAaX,EAAQzG,OAErBqH,EAAUH,EAAKlH,OAEf4G,EAAmB7C,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI5E,EAAU0E,IAExD,IAAIG,EAAmB5E,EAEnB6E,EAAeb,EAInB,MAAMc,EAAiBhF,EAAqB,GAAKF,EAE3CmF,EAAYD,EAAiBvI,MAAMkI,GAAW,GAEpD,IAAInE,EAGJ,MAAQA,EAAQgE,EAAKU,QAAQnB,EAASgB,KAAkB,GAAG,CACzD,IAAInF,EAAQkE,EAAeC,EAAS,CAClCE,gBAAiBzD,EACjB0D,mBACA/D,WACAQ,mBAMF,GAHAmE,EAAmBzD,KAAKwD,IAAIjF,EAAOkF,GACnCC,EAAevE,EAAQkE,EAEnBM,EAAgB,CAClB,IAAIvE,EAAI,EACR,KAAOA,EAAIiE,GACTO,EAAUzE,EAAQC,GAAK,EACvBA,GAAK,CAET,CACF,CAGAsE,GAAgB,EAEhB,IAAII,EAAa,GACbC,EAAa,EACbC,EAASX,EAAaC,EAE1B,MAAMW,EAAO,GAAMZ,EAAa,EAEhC,IAAK,IAAIjE,EAAI,EAAGA,EAAIiE,EAAYjE,GAAK,EAAG,CAItC,IAAI8E,EAAS,EACTC,EAASH,EAEb,KAAOE,EAASC,GAAQ,CACR1B,EAAeC,EAAS,CACpCC,OAAQvD,EACRwD,gBAAiBC,EAAmBsB,EACpCtB,mBACA/D,WACAQ,oBAGWmE,EACXS,EAASC,EAETH,EAASG,EAGXA,EAASnE,KAAKoE,OAAOJ,EAASE,GAAU,EAAIA,EAC9C,CAGAF,EAASG,EAET,IAAIE,EAAQrE,KAAKuD,IAAI,EAAGV,EAAmBsB,EAAS,GAChDG,EAAS5F,EACT4E,EACAtD,KAAKwD,IAAIX,EAAmBsB,EAAQb,GAAWD,EAG/CkB,EAASnJ,MAAMkJ,EAAS,GAE5BC,EAAOD,EAAS,IAAM,GAAKlF,GAAK,EAEhC,IAAK,IAAIoF,EAAIF,EAAQE,GAAKH,EAAOG,GAAK,EAAG,CACvC,IAAI5B,EAAkB4B,EAAI,EACtBC,EAAYrB,EAAgBD,EAAKuB,OAAO9B,IAgB5C,GAdIe,IAEFC,EAAUhB,MAAsB6B,GAIlCF,EAAOC,IAAOD,EAAOC,EAAI,IAAM,EAAK,GAAKC,EAGrCrF,IACFmF,EAAOC,KACHV,EAAWU,EAAI,GAAKV,EAAWU,KAAO,EAAK,EAAIV,EAAWU,EAAI,IAGhED,EAAOC,GAAKP,IACdF,EAAatB,EAAeC,EAAS,CACnCC,OAAQvD,EACRwD,kBACAC,mBACA/D,WACAQ,mBAKEyE,GAAcN,GAAkB,CAMlC,GAJAA,EAAmBM,EACnBL,EAAed,EAGXc,GAAgBb,EAClB,MAIFwB,EAAQrE,KAAKuD,IAAI,EAAG,EAAIV,EAAmBa,EAC7C,CAEJ,CAWA,GARcjB,EAAeC,EAAS,CACpCC,OAAQvD,EAAI,EACZwD,gBAAiBC,EACjBA,mBACA/D,WACAQ,mBAGUmE,EACV,MAGFK,EAAaS,CACf,CAEA,MAAMhJ,EAAS,CACboJ,QAASjB,GAAgB,EAEzBnF,MAAOyB,KAAKuD,IAAI,KAAOQ,IAGzB,GAAIJ,EAAgB,CAClB,MAAMiB,EA7MV,SACEC,EAAY,GACZlG,EAAqBX,EAAOW,oBAE5B,IAAIiG,EAAU,GACVP,GAAS,EACTS,GAAO,EACP1F,EAAI,EAER,IAAK,IAAIC,EAAMwF,EAAU5I,OAAQmD,EAAIC,EAAKD,GAAK,EAAG,CAChD,IAAIe,EAAQ0E,EAAUzF,GAClBe,IAAoB,IAAXkE,EACXA,EAAQjF,EACEe,IAAoB,IAAXkE,IACnBS,EAAM1F,EAAI,EACN0F,EAAMT,EAAQ,GAAK1F,GACrBiG,EAAQtK,KAAK,CAAC+J,EAAOS,IAEvBT,GAAS,EAEb,CAOA,OAJIQ,EAAUzF,EAAI,IAAMA,EAAIiF,GAAS1F,GACnCiG,EAAQtK,KAAK,CAAC+J,EAAOjF,EAAI,IAGpBwF,CACT,CAiLoBG,CAAqBnB,EAAWjF,GAC3CiG,EAAQ3I,OAEFwC,IACTlD,EAAOqJ,QAAUA,GAFjBrJ,EAAOoJ,SAAU,CAIrB,CAEA,OAAOpJ,CACT,CAEA,SAASyJ,EAAsBtC,GAC7B,IAAIuB,EAAO,CAAC,EAEZ,IAAK,IAAI7E,EAAI,EAAGC,EAAMqD,EAAQzG,OAAQmD,EAAIC,EAAKD,GAAK,EAAG,CACrD,MAAM6F,EAAOvC,EAAQgC,OAAOtF,GAC5B6E,EAAKgB,IAAShB,EAAKgB,IAAS,GAAM,GAAM5F,EAAMD,EAAI,CACpD,CAEA,OAAO6E,CACT,CAEA,MAAMiB,EACJ,WAAAtI,CACE8F,GACA,SACE9D,EAAWZ,EAAOY,SAAQ,UAC1BC,EAAYb,EAAOa,UAAS,SAC5BC,EAAWd,EAAOc,SAAQ,eAC1BL,EAAiBT,EAAOS,eAAc,eACtCC,EAAiBV,EAAOU,eAAc,mBACtCC,EAAqBX,EAAOW,mBAAkB,gBAC9CV,EAAkBD,EAAOC,gBAAe,eACxCqB,EAAiBtB,EAAOsB,gBACtB,CAAC,GAiBL,GAfApG,KAAKiM,QAAU,CACbvG,WACAC,YACAC,WACAL,iBACAC,iBACAC,qBACAV,kBACAqB,kBAGFpG,KAAKwJ,QAAUzE,EAAkByE,EAAUA,EAAQ0C,cAEnDlM,KAAKmM,OAAS,IAETnM,KAAKwJ,QAAQzG,OAChB,OAGF,MAAMqJ,EAAW,CAAC5C,EAAS6C,KACzBrM,KAAKmM,OAAO/K,KAAK,CACfoI,UACA8C,SAAUR,EAAsBtC,GAChC6C,cACA,EAGElG,EAAMnG,KAAKwJ,QAAQzG,OAEzB,GAAIoD,EAAM4D,EAAU,CAClB,IAAI7D,EAAI,EACR,MAAMqG,EAAYpG,EAAM4D,EAClB6B,EAAMzF,EAAMoG,EAElB,KAAOrG,EAAI0F,GACTQ,EAASpM,KAAKwJ,QAAQgD,OAAOtG,EAAG6D,GAAW7D,GAC3CA,GAAK6D,EAGP,GAAIwC,EAAW,CACb,MAAMF,EAAalG,EAAM4D,EACzBqC,EAASpM,KAAKwJ,QAAQgD,OAAOH,GAAaA,EAC5C,CACF,MACED,EAASpM,KAAKwJ,QAAS,EAE3B,CAEA,QAAAiD,CAASxC,GACP,MAAM,gBAAElF,EAAe,eAAEQ,GAAmBvF,KAAKiM,QAOjD,GALKlH,IACHkF,EAAOA,EAAKiC,eAIVlM,KAAKwJ,UAAYS,EAAM,CACzB,IAAI5H,EAAS,CACXoJ,SAAS,EACTpG,MAAO,GAOT,OAJIE,IACFlD,EAAOqJ,QAAU,CAAC,CAAC,EAAGzB,EAAKlH,OAAS,KAG/BV,CACT,CAGA,MAAM,SACJqD,EAAQ,SACRE,EAAQ,UACRD,EAAS,eACTH,EAAc,mBACdC,EAAkB,eAClBW,GACEpG,KAAKiM,QAET,IAAIS,EAAa,GACbC,EAAa,EACbC,GAAa,EAEjB5M,KAAKmM,OAAOpI,SAAQ,EAAGyF,UAAS8C,WAAUD,iBACxC,MAAM,QAAEZ,EAAO,MAAEpG,EAAK,QAAEqG,GAAY1B,EAAOC,EAAMT,EAAS8C,EAAU,CAClE5G,SAAUA,EAAW2G,EACrBzG,WACAD,YACAH,iBACAC,qBACAF,iBACAa,mBAGEqF,IACFmB,GAAa,GAGfD,GAActH,EAEVoG,GAAWC,IACbgB,EAAa,IAAIA,KAAehB,GAClC,IAGF,IAAIrJ,EAAS,CACXoJ,QAASmB,EACTvH,MAAOuH,EAAaD,EAAa3M,KAAKmM,OAAOpJ,OAAS,GAOxD,OAJI6J,GAAcrH,IAChBlD,EAAOqJ,QAAUgB,GAGZrK,CACT,EAGF,MAAMwK,EACJ,WAAAnJ,CAAY8F,GACVxJ,KAAKwJ,QAAUA,CACjB,CACA,mBAAOsD,CAAatD,GAClB,OAAOuD,EAASvD,EAASxJ,KAAKgN,WAChC,CACA,oBAAOC,CAAczD,GACnB,OAAOuD,EAASvD,EAASxJ,KAAKkN,YAChC,CACA,MAAAlD,GAAkB,EAGpB,SAAS+C,EAASvD,EAAS2D,GACzB,MAAMC,EAAU5D,EAAQvC,MAAMkG,GAC9B,OAAOC,EAAUA,EAAQ,GAAK,IAChC,CA8JA,MAAMC,UAAmBR,EACvB,WAAAnJ,CACE8F,GACA,SACE9D,EAAWZ,EAAOY,SAAQ,UAC1BC,EAAYb,EAAOa,UAAS,SAC5BC,EAAWd,EAAOc,SAAQ,eAC1BL,EAAiBT,EAAOS,eAAc,eACtCC,EAAiBV,EAAOU,eAAc,mBACtCC,EAAqBX,EAAOW,mBAAkB,gBAC9CV,EAAkBD,EAAOC,gBAAe,eACxCqB,EAAiBtB,EAAOsB,gBACtB,CAAC,GAELkH,MAAM9D,GACNxJ,KAAKuN,aAAe,IAAIvB,EAAYxC,EAAS,CAC3C9D,WACAC,YACAC,WACAL,iBACAC,iBACAC,qBACAV,kBACAqB,kBAEJ,CACA,eAAW9E,GACT,MAAO,OACT,CACA,qBAAW0L,GACT,MAAO,UACT,CACA,sBAAWE,GACT,MAAO,QACT,CACA,MAAAlD,CAAOC,GACL,OAAOjK,KAAKuN,aAAad,SAASxC,EACpC,EAKF,MAAMuD,UAAqBX,EACzB,WAAAnJ,CAAY8F,GACV8D,MAAM9D,EACR,CACA,eAAWlI,GACT,MAAO,SACT,CACA,qBAAW0L,GACT,MAAO,WACT,CACA,sBAAWE,GACT,MAAO,SACT,CACA,MAAAlD,CAAOC,GACL,IACIhE,EADAP,EAAW,EAGf,MAAMgG,EAAU,GACVvB,EAAanK,KAAKwJ,QAAQzG,OAGhC,MAAQkD,EAAQgE,EAAKU,QAAQ3K,KAAKwJ,QAAS9D,KAAc,GACvDA,EAAWO,EAAQkE,EACnBuB,EAAQtK,KAAK,CAAC6E,EAAOP,EAAW,IAGlC,MAAM+F,IAAYC,EAAQ3I,OAE1B,MAAO,CACL0I,UACApG,MAAOoG,EAAU,EAAI,EACrBC,UAEJ,EAIF,MAAM+B,EAAY,CAzOlB,cAAyBZ,EACvB,WAAAnJ,CAAY8F,GACV8D,MAAM9D,EACR,CACA,eAAWlI,GACT,MAAO,OACT,CACA,qBAAW0L,GACT,MAAO,WACT,CACA,sBAAWE,GACT,MAAO,SACT,CACA,MAAAlD,CAAOC,GACL,MAAMwB,EAAUxB,IAASjK,KAAKwJ,QAE9B,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAG1L,KAAKwJ,QAAQzG,OAAS,GAEvC,GAsNAyK,EAtLF,cAA+BX,EAC7B,WAAAnJ,CAAY8F,GACV8D,MAAM9D,EACR,CACA,eAAWlI,GACT,MAAO,cACT,CACA,qBAAW0L,GACT,MAAO,YACT,CACA,sBAAWE,GACT,MAAO,UACT,CACA,MAAAlD,CAAOC,GACL,MAAMwB,EAAUxB,EAAKyD,WAAW1N,KAAKwJ,SAErC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAG1L,KAAKwJ,QAAQzG,OAAS,GAEvC,GAKF,cAAsC8J,EACpC,WAAAnJ,CAAY8F,GACV8D,MAAM9D,EACR,CACA,eAAWlI,GACT,MAAO,sBACT,CACA,qBAAW0L,GACT,MAAO,aACT,CACA,sBAAWE,GACT,MAAO,WACT,CACA,MAAAlD,CAAOC,GACL,MAAMwB,GAAWxB,EAAKyD,WAAW1N,KAAKwJ,SAEtC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGzB,EAAKlH,OAAS,GAE/B,GA+BF,cAAsC8J,EACpC,WAAAnJ,CAAY8F,GACV8D,MAAM9D,EACR,CACA,eAAWlI,GACT,MAAO,sBACT,CACA,qBAAW0L,GACT,MAAO,aACT,CACA,sBAAWE,GACT,MAAO,WACT,CACA,MAAAlD,CAAOC,GACL,MAAMwB,GAAWxB,EAAK0D,SAAS3N,KAAKwJ,SACpC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGzB,EAAKlH,OAAS,GAE/B,GA9CF,cAA+B8J,EAC7B,WAAAnJ,CAAY8F,GACV8D,MAAM9D,EACR,CACA,eAAWlI,GACT,MAAO,cACT,CACA,qBAAW0L,GACT,MAAO,YACT,CACA,sBAAWE,GACT,MAAO,UACT,CACA,MAAAlD,CAAOC,GACL,MAAMwB,EAAUxB,EAAK0D,SAAS3N,KAAKwJ,SAEnC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAACzB,EAAKlH,OAAS/C,KAAKwJ,QAAQzG,OAAQkH,EAAKlH,OAAS,GAE/D,GApGF,cAAgC8J,EAC9B,WAAAnJ,CAAY8F,GACV8D,MAAM9D,EACR,CACA,eAAWlI,GACT,MAAO,eACT,CACA,qBAAW0L,GACT,MAAO,WACT,CACA,sBAAWE,GACT,MAAO,SACT,CACA,MAAAlD,CAAOC,GACL,MACMwB,GAAqB,IADbxB,EAAKU,QAAQ3K,KAAKwJ,SAGhC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGzB,EAAKlH,OAAS,GAE/B,GAiMAsK,GAGIO,EAAeH,EAAU1K,OAGzB8K,EAAW,qCAmDjB,MAAMC,EAAgB,IAAIC,IAAI,CAACV,EAAW/L,KAAMkM,EAAalM,OA8B7D,MAAM0M,EACJ,WAAAtK,CACE8F,GACA,gBACEzE,EAAkBD,EAAOC,gBAAe,eACxCQ,EAAiBT,EAAOS,eAAc,mBACtCE,EAAqBX,EAAOW,mBAAkB,eAC9CW,EAAiBtB,EAAOsB,eAAc,eACtCZ,EAAiBV,EAAOU,eAAc,SACtCE,EAAWZ,EAAOY,SAAQ,UAC1BC,EAAYb,EAAOa,UAAS,SAC5BC,EAAWd,EAAOc,UAChB,CAAC,GAEL5F,KAAKiO,MAAQ,KACbjO,KAAKiM,QAAU,CACblH,kBACAQ,iBACAE,qBACAD,iBACAY,iBACAV,WACAC,YACAC,YAGF5F,KAAKwJ,QAAUzE,EAAkByE,EAAUA,EAAQ0C,cACnDlM,KAAKiO,MAtGT,SAAoBzE,EAASyC,EAAU,CAAC,GACtC,OAAOzC,EAAQpJ,MANA,KAMgBkJ,KAAKb,IAClC,IAAIwF,EAAQxF,EACT3F,OACA1C,MAAMyN,GACNK,QAAQzF,GAASA,KAAUA,EAAK3F,SAE/BqL,EAAU,GACd,IAAK,IAAIjI,EAAI,EAAGC,EAAM8H,EAAMlL,OAAQmD,EAAIC,EAAKD,GAAK,EAAG,CACnD,MAAMkI,EAAYH,EAAM/H,GAGxB,IAAImI,GAAQ,EACR/I,GAAO,EACX,MAAQ+I,KAAW/I,EAAMsI,GAAc,CACrC,MAAMU,EAAWb,EAAUnI,GAC3B,IAAIiJ,EAAQD,EAASxB,aAAasB,GAC9BG,IACFJ,EAAQ/M,KAAK,IAAIkN,EAASC,EAAOtC,IACjCoC,GAAQ,EAEZ,CAEA,IAAIA,EAMJ,IADA/I,GAAO,IACEA,EAAMsI,GAAc,CAC3B,MAAMU,EAAWb,EAAUnI,GAC3B,IAAIiJ,EAAQD,EAASrB,cAAcmB,GACnC,GAAIG,EAAO,CACTJ,EAAQ/M,KAAK,IAAIkN,EAASC,EAAOtC,IACjC,KACF,CACF,CACF,CAEA,OAAOkC,IAEX,CA6DiBK,CAAWxO,KAAKwJ,QAASxJ,KAAKiM,QAC7C,CAEA,gBAAOwC,CAAUC,EAAGzC,GAClB,OAAOA,EAAQpG,iBACjB,CAEA,QAAA4G,CAASxC,GACP,MAAMgE,EAAQjO,KAAKiO,MAEnB,IAAKA,EACH,MAAO,CACLxC,SAAS,EACTpG,MAAO,GAIX,MAAM,eAAEE,EAAc,gBAAER,GAAoB/E,KAAKiM,QAEjDhC,EAAOlF,EAAkBkF,EAAOA,EAAKiC,cAErC,IAAIyC,EAAa,EACbjC,EAAa,GACbC,EAAa,EAGjB,IAAK,IAAIzG,EAAI,EAAG0I,EAAOX,EAAMlL,OAAQmD,EAAI0I,EAAM1I,GAAK,EAAG,CACrD,MAAMuH,EAAYQ,EAAM/H,GAGxBwG,EAAW3J,OAAS,EACpB4L,EAAa,EAGb,IAAK,IAAIrD,EAAI,EAAGuD,EAAOpB,EAAU1K,OAAQuI,EAAIuD,EAAMvD,GAAK,EAAG,CACzD,MAAMgD,EAAWb,EAAUnC,IACrB,QAAEG,EAAO,QAAEC,EAAO,MAAErG,GAAUiJ,EAAStE,OAAOC,GAEpD,IAAIwB,EAWG,CACLkB,EAAa,EACbgC,EAAa,EACbjC,EAAW3J,OAAS,EACpB,KACF,CAbE,GAFA4L,GAAc,EACdhC,GAActH,EACVE,EAAgB,CAClB,MAAMjE,EAAOgN,EAAS5K,YAAYpC,KAC9BwM,EAAc5G,IAAI5F,GACpBoL,EAAa,IAAIA,KAAehB,GAEhCgB,EAAWtL,KAAKsK,EAEpB,CAOJ,CAGA,GAAIiD,EAAY,CACd,IAAItM,EAAS,CACXoJ,SAAS,EACTpG,MAAOsH,EAAagC,GAOtB,OAJIpJ,IACFlD,EAAOqJ,QAAUgB,GAGZrK,CACT,CACF,CAGA,MAAO,CACLoJ,SAAS,EACTpG,MAAO,EAEX,EAGF,MAAMyJ,EAAsB,GAM5B,SAASC,EAAevF,EAASyC,GAC/B,IAAK,IAAI/F,EAAI,EAAGC,EAAM2I,EAAoB/L,OAAQmD,EAAIC,EAAKD,GAAK,EAAG,CACjE,IAAI8I,EAAgBF,EAAoB5I,GACxC,GAAI8I,EAAcP,UAAUjF,EAASyC,GACnC,OAAO,IAAI+C,EAAcxF,EAASyC,EAEtC,CAEA,OAAO,IAAID,EAAYxC,EAASyC,EAClC,CAEA,MAAMgD,EACC,OADDA,EAEA,MAGAC,EACE,QADFA,EAEK,OAGLC,EAAgBlB,MACjBA,EAAMgB,KAAwBhB,EAAMgB,IAOnCG,EAAqBnB,IAAU,CACnC,CAACgB,GAAsBvP,OAAOiE,KAAKsK,GAAO3E,KAAKhG,IAAQ,CACrD,CAACA,GAAM2K,EAAM3K,SAMjB,SAAS+L,EAAMpB,EAAOhC,GAAS,KAAEqD,GAAO,GAAS,CAAC,GAChD,MAAMC,EAAQtB,IACZ,IAAItK,EAAOjE,OAAOiE,KAAKsK,GAEvB,MAAMuB,EAjBK,CAACvB,KAAYA,EAAMiB,GAiBVO,CAAOxB,GAE3B,IAAKuB,GAAe7L,EAAKZ,OAAS,IAAMoM,EAAalB,GACnD,OAAOsB,EAAKH,EAAkBnB,IAGhC,GArBW,CAACA,IACbhM,EAAQgM,IAAUvL,EAASuL,KAAWkB,EAAalB,GAoB9CyB,CAAOzB,GAAQ,CACjB,MAAM3K,EAAMkM,EAAcvB,EAAMiB,GAAgBvL,EAAK,GAE/C6F,EAAUgG,EAAcvB,EAAMiB,GAAmBjB,EAAM3K,GAE7D,IAAKf,EAASiH,GACZ,MAAM,IAAI5E,MAjxC2B,CAACtB,GAC5C,yBAAyBA,IAgxCHqM,CAAqCrM,IAGvD,MAAMU,EAAM,CACVI,MAAOO,EAAYrB,GACnBkG,WAOF,OAJI8F,IACFtL,EAAIsK,SAAWS,EAAevF,EAASyC,IAGlCjI,CACT,CAEA,IAAIlD,EAAO,CACT1B,SAAU,GACVwQ,SAAUjM,EAAK,IAajB,OAVAA,EAAKI,SAAST,IACZ,MAAM1B,EAAQqM,EAAM3K,GAEhBrB,EAAQL,IACVA,EAAMmC,SAAS0E,IACb3H,EAAK1B,SAASgC,KAAKmO,EAAK9G,GAAM,GAElC,IAGK3H,GAOT,OAJKqO,EAAalB,KAChBA,EAAQmB,EAAkBnB,IAGrBsB,EAAKtB,EACd,CAuBA,SAAS4B,GAAiBxN,EAAQyN,GAChC,MAAM1C,EAAU/K,EAAO+K,QACvB0C,EAAK1C,QAAU,GAEVxK,EAAUwK,IAIfA,EAAQrJ,SAASkD,IACf,IAAKrE,EAAUqE,EAAMyE,WAAazE,EAAMyE,QAAQ3I,OAC9C,OAGF,MAAM,QAAE2I,EAAO,MAAE9J,GAAUqF,EAE3B,IAAIjD,EAAM,CACR0H,UACA9J,SAGEqF,EAAM3D,MACRU,EAAIV,IAAM2D,EAAM3D,IAAIkB,KAGlByC,EAAM3B,KAAO,IACftB,EAAI+L,SAAW9I,EAAM3B,KAGvBwK,EAAK1C,QAAQhM,KAAK4C,EAAI,GAE1B,CAEA,SAASgM,GAAe3N,EAAQyN,GAC9BA,EAAKzK,MAAQhD,EAAOgD,KACtB,CAiCA,MAAM4K,GACJ,WAAAvM,CAAYiE,EAAMsE,EAAU,CAAC,EAAGhG,GAC9BjG,KAAKiM,QAAU,IAAKnH,KAAWmH,GAG7BjM,KAAKiM,QAAQpG,kBAMf7F,KAAKkQ,UAAY,IAAIzM,EAASzD,KAAKiM,QAAQtI,MAE3C3D,KAAKmQ,cAAcxI,EAAM1B,EAC3B,CAEA,aAAAkK,CAAcxI,EAAM1B,GAGlB,GAFAjG,KAAKoQ,MAAQzI,EAET1B,KAAWA,aAAiBO,GAC9B,MAAM,IAAI5B,MAv6Ca,0BA06CzB5E,KAAKqQ,SACHpK,GACAmD,EAAYpJ,KAAKiM,QAAQtI,KAAM3D,KAAKoQ,MAAO,CACzC3L,MAAOzE,KAAKiM,QAAQxH,MACpB6B,gBAAiBtG,KAAKiM,QAAQ3F,iBAEpC,CAEA,GAAA8B,CAAIJ,GACGpF,EAAUoF,KAIfhI,KAAKoQ,MAAMhP,KAAK4G,GAChBhI,KAAKqQ,SAASjI,IAAIJ,GACpB,CAEA,MAAAsI,CAAOC,EAAY,KAAoB,GACrC,MAAMpC,EAAU,GAEhB,IAAK,IAAIjI,EAAI,EAAGC,EAAMnG,KAAKoQ,MAAMrN,OAAQmD,EAAIC,EAAKD,GAAK,EAAG,CACxD,MAAM8B,EAAMhI,KAAKoQ,MAAMlK,GACnBqK,EAAUvI,EAAK9B,KACjBlG,KAAKsI,SAASpC,GACdA,GAAK,EACLC,GAAO,EAEPgI,EAAQ/M,KAAK4G,GAEjB,CAEA,OAAOmG,CACT,CAEA,QAAA7F,CAAShD,GACPtF,KAAKoQ,MAAM7H,OAAOjD,EAAK,GACvBtF,KAAKqQ,SAAS/H,SAAShD,EACzB,CAEA,QAAAkL,GACE,OAAOxQ,KAAKqQ,QACd,CAEA,MAAArG,CAAOiE,GAAO,MAAEwC,GAAQ,GAAO,CAAC,GAC9B,MAAM,eACJlL,EAAc,aACdP,EAAY,WACZC,EAAU,OACVC,EAAM,gBACNmB,GACErG,KAAKiM,QAET,IAAIkC,EAAU5L,EAAS0L,GACnB1L,EAASvC,KAAKoQ,MAAM,IAClBpQ,KAAK0Q,kBAAkBzC,GACvBjO,KAAK2Q,kBAAkB1C,GACzBjO,KAAK4Q,eAAe3C,GAYxB,OAlLJ,SACEE,GACA,gBAAE9H,EAAkBvB,EAAOuB,kBAE3B8H,EAAQpK,SAAS1B,IACf,IAAIsK,EAAa,EAEjBtK,EAAO+K,QAAQrJ,SAAQ,EAAGT,MAAKmD,OAAMpB,YACnC,MAAMnB,EAASZ,EAAMA,EAAIY,OAAS,KAElCyI,GAAc7F,KAAKC,IACP,IAAV1B,GAAenB,EAAS2M,OAAOC,QAAUzL,GACxCnB,GAAU,IAAMmC,EAAkB,EAAII,GACxC,IAGHpE,EAAOgD,MAAQsH,CAAU,GAE7B,CAsJIoE,CAAa5C,EAAS,CAAE9H,oBAEpBpB,GACFkJ,EAAQ6C,KAAK9L,GAGX1C,EAASiO,IAAUA,GAAS,IAC9BtC,EAAUA,EAAQ8C,MAAM,EAAGR,IAvHjC,SACEtC,EACAxG,GACA,eACEpC,EAAiBT,EAAOS,eAAc,aACtCP,EAAeF,EAAOE,cACpB,CAAC,GAEL,MAAMkM,EAAe,GAKrB,OAHI3L,GAAgB2L,EAAa9P,KAAKyO,IAClC7K,GAAckM,EAAa9P,KAAK4O,IAE7B7B,EAAQ7E,KAAKjH,IAClB,MAAM,IAAEiD,GAAQjD,EAEVyN,EAAO,CACXrH,KAAMd,EAAKrC,GACXyK,SAAUzK,GASZ,OANI4L,EAAanO,QACfmO,EAAanN,SAASoN,IACpBA,EAAY9O,EAAQyN,EAAK,IAItBA,IAEX,CA6FWsB,CAAOjD,EAASnO,KAAKoQ,MAAO,CACjC7K,iBACAP,gBAEJ,CAEA,iBAAA0L,CAAkBzC,GAChB,MAAMK,EAAWS,EAAed,EAAOjO,KAAKiM,UACtC,QAAErE,GAAY5H,KAAKqQ,SACnBlC,EAAU,GAmBhB,OAhBAvG,EAAQ7D,SAAQ,EAAG4E,EAAGsB,EAAM/D,EAAGZ,EAAK6B,EAAGV,MACrC,IAAK7D,EAAUqH,GACb,OAGF,MAAM,QAAEwB,EAAO,MAAEpG,EAAK,QAAEqG,GAAY4C,EAAS7B,SAASxC,GAElDwB,GACF0C,EAAQ/M,KAAK,CACXqH,KAAMwB,EACN3E,MACA8H,QAAS,CAAC,CAAE/H,QAAOzD,MAAOqI,EAAMxD,OAAMiF,aAE1C,IAGKyC,CACT,CAEA,cAAAyC,CAAe3C,GAEb,MAAMoD,EAAahC,EAAMpB,EAAOjO,KAAKiM,SAE/BqF,EAAW,CAACxQ,EAAM2H,EAAMnD,KAC5B,IAAKxE,EAAK1B,SAAU,CAClB,MAAM,MAAEgF,EAAK,SAAEkK,GAAaxN,EAEtBsM,EAAUpN,KAAKuR,aAAa,CAChCjO,IAAKtD,KAAKkQ,UAAU/L,IAAIC,GACxBxC,MAAO5B,KAAKqQ,SAAS7H,uBAAuBC,EAAMrE,GAClDkK,aAGF,OAAIlB,GAAWA,EAAQrK,OACd,CACL,CACEuC,MACAmD,OACA2E,YAKC,EACT,CAEA,MAAMoE,EAAM,GACZ,IAAK,IAAItL,EAAI,EAAGC,EAAMrF,EAAK1B,SAAS2D,OAAQmD,EAAIC,EAAKD,GAAK,EAAG,CAC3D,MAAMuL,EAAQ3Q,EAAK1B,SAAS8G,GACtB7D,EAASiP,EAASG,EAAOhJ,EAAMnD,GACrC,GAAIjD,EAAOU,OACTyO,EAAIpQ,QAAQiB,QACP,GAAIvB,EAAK8O,WAAaX,EAC3B,MAAO,EAEX,CACA,OAAOuC,GAGH5J,EAAU5H,KAAKqQ,SAASzI,QACxB8J,EAAY,CAAC,EACbvD,EAAU,GAmBhB,OAjBAvG,EAAQ7D,SAAQ,EAAG6E,EAAGH,EAAMvC,EAAGZ,MAC7B,GAAI1C,EAAU6F,GAAO,CACnB,IAAIkJ,EAAaL,EAASD,EAAY5I,EAAMnD,GAExCqM,EAAW5O,SAER2O,EAAUpM,KACboM,EAAUpM,GAAO,CAAEA,MAAKmD,OAAM2E,QAAS,IACvCe,EAAQ/M,KAAKsQ,EAAUpM,KAEzBqM,EAAW5N,SAAQ,EAAGqJ,cACpBsE,EAAUpM,GAAK8H,QAAQhM,QAAQgM,EAAQ,IAG7C,KAGKe,CACT,CAEA,iBAAAwC,CAAkB1C,GAChB,MAAMK,EAAWS,EAAed,EAAOjO,KAAKiM,UACtC,KAAEtI,EAAI,QAAEiE,GAAY5H,KAAKqQ,SACzBlC,EAAU,GA8BhB,OA3BAvG,EAAQ7D,SAAQ,EAAG6E,EAAGH,EAAMvC,EAAGZ,MAC7B,IAAK1C,EAAU6F,GACb,OAGF,IAAI2E,EAAU,GAGdzJ,EAAKI,SAAQ,CAACT,EAAKuF,KACjBuE,EAAQhM,QACHpB,KAAKuR,aAAa,CACnBjO,MACA1B,MAAO6G,EAAKI,GACZyF,aAEH,IAGClB,EAAQrK,QACVoL,EAAQ/M,KAAK,CACXkE,MACAmD,OACA2E,WAEJ,IAGKe,CACT,CACA,YAAAoD,EAAa,IAAEjO,EAAG,MAAE1B,EAAK,SAAE0M,IACzB,IAAK1L,EAAUhB,GACb,MAAO,GAGT,IAAIwL,EAAU,GAEd,GAAInL,EAAQL,GACVA,EAAMmC,SAAQ,EAAG4E,EAAGsB,EAAM/D,EAAGZ,EAAK6B,EAAGV,MACnC,IAAK7D,EAAUqH,GACb,OAGF,MAAM,QAAEwB,EAAO,MAAEpG,EAAK,QAAEqG,GAAY4C,EAAS7B,SAASxC,GAElDwB,GACF2B,EAAQhM,KAAK,CACXiE,QACA/B,MACA1B,MAAOqI,EACP3E,MACAmB,OACAiF,WAEJ,QAEG,CACL,MAAQ/C,EAAGsB,EAAM9C,EAAGV,GAAS7E,GAEvB,QAAE6J,EAAO,MAAEpG,EAAK,QAAEqG,GAAY4C,EAAS7B,SAASxC,GAElDwB,GACF2B,EAAQhM,KAAK,CAAEiE,QAAO/B,MAAK1B,MAAOqI,EAAMxD,OAAMiF,WAElD,CAEA,OAAO0B,CACT,ECjsDa,SAASwE,GAASzS,GAA6C,IAA5C,YAAE0S,GAAuC1S,EAC1E,MAAM2S,EA3BP,WACC,MAoBMC,GAAWC,EAAAA,EAAAA,IApBN,aAsBX,OAAOtR,EAAAA,EAAAA,GAAaqR,EAASpR,QAASoR,EAASnR,YAChD,CAGkBqR,GAEXC,GAAeC,EAAAA,EAAAA,UAAQ,KAC5BL,EAASd,MAAK,CAAC7L,EAAGC,IAAMD,EAAEjF,KAAKkS,cAAchN,EAAElF,QAE/C,MAAMmS,EAAO,IAAIpC,GAAK6B,EAAU,CAC/BnO,KAAM,CAAC,OAAQ,cAEhB,OAAOkO,EAAcQ,EAAKrI,OAAO6H,GAAavI,KAAKX,GAAMA,EAAEF,OAAQqJ,CAAQ,GACxE,CAACD,IAGL,OACCxS,EAAAA,cAAAA,EAAAA,SAAA,KACCA,EAAAA,cAAA,OAAKC,UAAU,+CACdD,EAAAA,cAAA,QAAMC,UAAU,aAAY,aAC5BD,EAAAA,cAAA,QAAMC,UAAU,4BAA2B,eAC3CD,EAAAA,cAAA,QAAMC,UAAU,WAAU,YAE3BD,EAAAA,cAAA,OAAKC,UAAU,+CACb4S,EAAa5I,KAAKxJ,GACXT,EAAAA,cAACwC,EAAW,CAAC/B,KAAMA,EAAMwD,IAAKxD,EAAKG,QAK/C,CDyqDAgQ,GAAKqC,QAAU,QACfrC,GAAK7G,YAAcA,EACnB6G,GAAKsC,WArxCL,SACEzC,GACA,MAAErL,EAAQK,EAAOL,MAAK,gBAAE6B,EAAkBxB,EAAOwB,iBAAoB,CAAC,GAEtE,MAAM,KAAE3C,EAAI,QAAEiE,GAAYkI,EACpBzG,EAAU,IAAI7C,EAAU,CAAE/B,QAAO6B,oBAGvC,OAFA+C,EAAQxB,QAAQlE,GAChB0F,EAAQ5B,gBAAgBG,GACjByB,CACT,EA6wCA4G,GAAKuC,OAAS1N,EAGZmL,GAAKzB,WAAaa,EApcpB,YAAqBoD,GACnB3D,EAAoB1N,QAAQqR,EAC9B,CAscEC,CAAS1E,GEltDX,OAtBA,WACC,MAAM,EAAC2E,EAAe,EAAEC,IAAmBC,EAAAA,EAAAA,UAAS,IAEpD,OACCxT,EAAAA,cAACH,EAAAA,EAAM,KACNG,EAAAA,cAAA,OAAKC,UAAU,4CACdD,EAAAA,cAACE,EAAAA,EAAK,KAAC,UACPF,EAAAA,cAAA,OAAKC,UAAU,+BAA8B,uBACxBD,EAAAA,cAAA,WAAKA,EAAAA,cAAA,WAAK,mDAIvBA,EAAAA,cAAA,OAAKC,UAAU,uEACxBD,EAAAA,cAAA,OAAKC,UAAU,wBACdD,EAAAA,cAACE,EAAAA,EAAK,CAACD,UAAU,kBAAiB,UAClCD,EAAAA,cAACgC,EAAS,CAACG,QAASoR,IACpBvT,EAAAA,cAACuS,GAAS,CAACC,YAAac,KAI5B,C","sources":["webpack://studyc/./src/components/Layout.tsx","webpack://studyc/./src/components/Title.tsx","webpack://studyc/./src/modules/listFiles.ts","webpack://studyc/./src/components/SearchBar.tsx","webpack://studyc/./src/components/FileListing.tsx","webpack://studyc/./node_modules/.pnpm/fuse.js@7.0.0/node_modules/fuse.js/dist/fuse.mjs","webpack://studyc/./src/components/ListFiles.tsx","webpack://studyc/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\";\n\nexport default function Layout({ children }: React.PropsWithChildren) {\n\treturn (\n\t\t<>\n\t\t\t{/* NAVBAR */}\n\t\t\t<main className=\"px-14 pt-10 w-screen h-screen font-body flex flex-row\">\n\t\t\t\t{children}\n\t\t\t</main>\n\t\t\t{/* FOOTER */}\n\t\t</>\n\t);\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { Link } from \"gatsby\";\n\nexport default function Title({ children, className, ...props }: PropsWithChildren & { className?: string }) {\n\treturn (\n\t\t<div className={\"flex h-[58px] items-center \" + className}>\n\t\t\t<Link\n\t\t\t\tclassName=\"text-4xl h-fit font-semibold lowercase tracking-tight text-purple\"\n\t\t\t\t{...props} to=\"/\"\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</Link>\n\t\t</div>\n\t);\n}\n","import type { FileSystemNode } from \"gatsby-source-filesystem\";\nimport moment from \"moment\";\n\ninterface QueryNodesResult<T> {\n\tnodes: T[];\n}\n\ntype AllFile = QueryNodesResult<FileSystemNode>;\n\nexport interface SitePageNode {\n\tpath: string;\n\tpageContext: Partial<{\n\t\tid: string;\n\t}>;\n}\n\ntype AllSitePage = QueryNodesResult<SitePageNode>;\n\nexport interface QueryResults {\n\tallFile: AllFile;\n\tallSitePage: AllSitePage;\n}\n\nexport interface File {\n\tid: string;\n\tname: string;\n\tpath: string;\n\tcategory: string;\n\tbase: string;\n\tpublicURL: string;\n\tlastModified: moment.Moment;\n}\n\nexport type FileList = File[];\n\nexport class File implements File {\n\tconstructor(file: FileSystemNode, path: string) {\n\t\tthis.id = file.id;\n\t\tthis.name = file.name;\n\t\tthis.path = path;\n\t\tthis.category = path.split(\"/\")[2];\n\n\t\tthis.base = file.base;\n\t\tthis.publicURL = file.publicURL as string || \"\";\n\n\t\tconst fields = file.fields as Record<string, unknown>\n\n\t\tif (fields && fields.lastModified) {\n\t\t\tthis.lastModified = moment(fields.lastModified as number);\n\t\t}\n\t}\n}\n\nexport function processFiles(allFile: AllFile, allSitePage: AllSitePage) {\n\tconst files = [] as FileList;\n\n\t// JANK!\n\tfor (const node of allFile.nodes) {\n\t\tconst correspondingPage = allSitePage.nodes.find(\n\t\t\t(page) => page.pageContext.id == node.id,\n\t\t);\n\t\tif (!correspondingPage) continue;\n\t\tfiles.push(new File(node, correspondingPage.path));\n\t}\n\n\treturn files;\n}\n","import React from \"react\";\n\ninterface Props {\n\tonInput?: (input: string) => void;\n\tplaceholder?: string;\n}\n\nexport default function SearchBar(props: Props): React.ReactNode {\n\treturn (\n\t\t<div className=\"flex h-[58px]\">\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tclassName=\"w-full border-2 rounded-md border-purple focus:outline-none px-4 text-2xl text-purple placeholder:purple placeholder:italic placeholder:lowercase\"\n\t\t\t\tplaceholder={props.placeholder || \"Search for File\"}\n\t\t\t\tonInput={(e) => {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tif (props.onInput) props.onInput(e.currentTarget.value);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport { File } from \"../modules/listFiles\";\nimport { Link } from \"gatsby\";\n\ninterface FileListingProps extends React.PropsWithChildren {\n\tfile: File;\n}\nexport default function FileListing({ file }: FileListingProps) {\n\tconst subject = file.category;\n\tconst url = file.path;\n\n\treturn (\n\t\t<Link to={url} className=\"border-b-2 group\">\n\t\t\t<div className=\"flex flex-row my-1\">\n\t\t\t\t<span className=\"basis-2/5 font-medium overflow-ellipsis group-hover:translate-x-2 transition-transform\">\n\t\t\t\t\t{file.name}\n\t\t\t\t</span>\n\t\t\t\t<span className=\"hidden md:block basis-32 overflow-ellipsis text-gray-500\">\n\t\t\t\t\t{file.lastModified.fromNow()}\n\t\t\t\t</span>\n\t\t\t\t<span className=\"ml-auto text-gray-500\">{subject}</span>\n\t\t\t</div>\n\t\t</Link>\n\t);\n}\n","/**\n * Fuse.js v7.0.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2023 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '7.0.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n","import React, { useMemo } from \"react\";\nimport { graphql, useStaticQuery, Link } from \"gatsby\";\nimport { QueryResults, FileList, processFiles, File } from \"../modules/listFiles\";\nimport FileListing from \"./FileListing\";\nimport Fuse from \"fuse.js\";\n\nfunction getListOfFiles() {\n\tconst query = graphql`\n\t\t{\n\t\t\tallSitePage {\n\t\t\t\tnodes {\n\t\t\t\t\tpath\n\t\t\t\t\tpageContext\n\t\t\t\t}\n\t\t\t}\n\t\t\tallFile(filter: { ext: { eq: \".md\" } }) {\n\t\t\t\tnodes {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tfields {\n\t\t\t\t\t\tlastModified\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n\n\tconst queryRes = useStaticQuery(query) as QueryResults;\n\n\treturn processFiles(queryRes.allFile, queryRes.allSitePage);\n}\n\nexport default function ListFiles({ searchInput }: { searchInput?: string }) {\n\tconst fileList = getListOfFiles();\n\n\tconst searchResult = useMemo(() => {\n\t\tfileList.sort((a, b) => a.name.localeCompare(b.name));\n\n\t\tconst fuse = new Fuse(fileList, {\n\t\t\tkeys: [\"name\", \"category\"]\n\t\t});\n\t\treturn searchInput ? fuse.search(searchInput).map((v) => v.item) : fileList;\n\t} , [searchInput]);\n\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"flex py-3 flex-row border-b-2 font-semibold\">\n\t\t\t\t<span className=\"basis-2/5\">File name</span>\n\t\t\t\t<span className=\"hidden md:block basis-32\">Last Update</span>\n\t\t\t\t<span className=\"ml-auto\">Subject</span>\n\t\t\t</div>\n\t\t\t<div className=\"flex flex-1 flex-col pb-3 overflow-y-scroll\">\n\t\t\t\t{searchResult.map((file) => {\n\t\t\t\t\treturn <FileListing file={file} key={file.id} />;\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t);\n}\n","import React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport Title from \"../components/Title\";\nimport SearchBar from \"../components/SearchBar\";\nimport ListFiles from \"../components/ListFiles\";\n\nfunction App(): React.ReactNode {\n\tconst [get_searchInput, set_searchInput] = useState(\"\");\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className=\"hidden md:flex flex-col flex-[0_0_200px]\">\n\t\t\t\t<Title>StudyC</Title>\n\t\t\t\t<div className=\"mt-auto mb-3 pr-3 leading-4\">\n\t\t\t\t\tstudyc made by sesa.<br/><br/>\n\t\t\t\t\tplease suggest a better name for this project.\n\t\t\t\t</div>\n\t\t\t</div>\n            <div className=\"hidden md:flex bg-gray-400 h-[65%] mr-4 flex-[0_0_2px] self-center\" />\n\t\t\t<div className=\"flex flex-1 flex-col\">\n\t\t\t\t<Title className=\"md:hidden mb-5\">StudyC</Title>\n\t\t\t\t<SearchBar onInput={set_searchInput} />\n\t\t\t\t<ListFiles searchInput={get_searchInput} />\n\t\t\t</div>\n\t\t</Layout>\n\t);\n}\n\nexport default App;\n"],"names":["Layout","_ref","children","React","className","Title","props","Link","Object","assign","to","File","file","path","this","id","name","category","split","base","publicURL","fields","lastModified","moment","processFiles","allFile","allSitePage","files","node","nodes","correspondingPage","find","page","pageContext","push","SearchBar","type","placeholder","onInput","e","stopPropagation","currentTarget","value","FileListing","subject","url","fromNow","isArray","Array","getTag","INFINITY","result","baseToString","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","isBlank","trim","length","undefined","prototype","toString","call","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","key","hasOwn","hasOwnProperty","KeyStore","constructor","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","get","keyId","toJSON","JSON","stringify","src","getFn","createKeyPath","createKeyId","Error","join","Config","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","useExtendedSearch","list","arr","deepGet","index","i","len","ignoreLocation","ignoreFieldNorm","fieldNormWeight","SPACE","FuseIndex","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","max","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","start","finish","bitArr","j","charMatch","charAt","isMatch","indices","matchmask","end","convertMaskToIndices","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","matches","FuzzyMatch","super","_bitapSearch","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","ExtendedSearch","query","filter","results","queryItem","found","searcher","token","parseQuery","condition","_","numMatches","qLen","pLen","registeredSearchers","createSearcher","searcherClass","LogicalOperator","KeyType","isExpression","convertToExplicit","parse","auto","next","isQueryPath","isPath","isLeaf","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","operator","transformMatches","data","refIndex","transformScore","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","Number","EPSILON","computeScore","sort","slice","transformers","transformer","format","expression","evaluate","_findMatches","res","child","resultMap","expResults","ListFiles","searchInput","fileList","queryRes","useStaticQuery","getListOfFiles","searchResult","useMemo","localeCompare","fuse","version","parseIndex","config","args","register","get_searchInput","set_searchInput","useState"],"sourceRoot":""}